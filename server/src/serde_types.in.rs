#[derive(Serialize, Deserialize)]
pub struct Error {
    /// Unique code identifying error type
    pub code: i32,
    /// Unique human readable name for error
    pub name: String,
    /// Unique human readable message for error
    pub message: String,
    // TODO: this needs to be another struct.  Data specific to error
    pub data: i32,
}

#[derive(Serialize, Deserialize)]
pub struct File {
    /// Name of file
    pub name: String,
    /// Path to file
    pub path: String,
    /// File or directory
    pub fType: String,
    /// Vector of File objects
    pub contents: Vec<File>,
}

#[derive(Serialize, Deserialize)]
pub struct Process {
    /// Identifying number of process on host machine
    pub id: i32,
    /// Name of process on host machine
    pub name: String,
}

#[derive(Serialize, Deserialize)]
pub struct Execution {
    /// Unique identifier
    pub id: i32,
    /// Type of execution.  Either 'function' or 'process'
    pub eType: String,
    /// Either `pending`, `executing`, `stopped`, or `done`
    pub status: String,
    /// Nanoseconds
    pub executionTime: i32,
    // TODO: this needs to be an object that contains data specific to this type
    pub data: i32,
}

#[derive(Serialize, Deserialize)]
pub struct Trace {
    pub index: i32,
    pub tType: i32,
    pub line: u32,
    pub data: Vec<String>, // example "variable: x, value: 7"
}

#[derive(Serialize, Deserialize)]
pub struct Function {
    pub address: i32,
    pub name: String,
    pub sourcePath: String,
    pub lineNumber: i32,
    pub lineCount: i32,
    pub parameters: Vec<Variable>,
}

#[derive(Serialize, Deserialize)]
pub struct AttachInfo {
    pub id: i32, // generated by server.  Used to identify the currently running process
    pub attachedProcess: String,
}

#[derive(Serialize, Deserialize)]
pub struct Breakpoint {
    pub function: Function,
    pub metadata: String
}

#[derive(Serialize, Deserialize)]
pub struct Variable {
    pub id: i32,
    pub name: String,
    pub sType: String, //TODO: this will become sourceType struct
    pub address: i32,
}
